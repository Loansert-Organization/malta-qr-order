import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { 
  Search, 
  ShoppingCart, 
  Star, 
  ChefHat,
  Bell,
  User,
  MapPin,
  Phone,
  ExternalLink
} from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import ClientOnboarding from '@/components/onboarding/ClientOnboarding';
import ClientOnboarding from '@/components/onboarding/ClientOnboarding';

interface Bar {
  id: string;
  name: string;
  address: string;
  contact_number?: string;
  rating?: number;
  review_count?: number;
  website_url?: string;
  country?: string;
}

const ClientHome = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  
  // State
  const [bars, setBars] = useState<Bar[]>([]);
  const [selectedCountry, setSelectedCountry] = useState<string>('');
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(true);
  const [cartCount, setCartCount] = useState(0);
  const [cartTotal, setCartTotal] = useState(0);
  const [showOnboarding, setShowOnboarding] = useState(false);

  // Session management
  const [sessionId] = useState(() => {
    let session = localStorage.getItem('icupa_session_id');
    if (!session) {
      session = crypto.randomUUID();
      localStorage.setItem('icupa_session_id', session);
    }
    return session;
  });

  // Check onboarding status
  useEffect(() => {
    const hasCompletedOnboarding = localStorage.getItem('icupa_onboarding_completed');
    const hasSkippedOnboarding = localStorage.getItem('icupa_onboarding_skipped');
    
    if (!hasCompletedOnboarding && !hasSkippedOnboarding) {
      setShowOnboarding(true);
    } else {
      detectUserCountry();
    }
  }, []);

  // Detect user country
  useEffect(() => {
    detectUserCountry();
  }, []);

  // Fetch data
  useEffect(() => {
    if (selectedCountry) {
      fetchBarsData();
      fetchCartSummary();
    }
  }, [selectedCountry]);

  const detectUserCountry = async () => {
    try {
      const savedCountry = localStorage.getItem('icupa_user_country');
      if (savedCountry) {
        setSelectedCountry(savedCountry);
        return;
      }

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            
            if (latitude > 35 && latitude < 36 && longitude > 14 && longitude < 15) {
              setSelectedCountry('Malta');
              localStorage.setItem('icupa_user_country', 'Malta');
            } else if (latitude > -3 && latitude < 0 && longitude > 28 && longitude < 32) {
              setSelectedCountry('Rwanda');
              localStorage.setItem('icupa_user_country', 'Rwanda');
            } else {
              setSelectedCountry('Malta');
              localStorage.setItem('icupa_user_country', 'Malta');
            }
          },
          () => {
            setSelectedCountry('Malta');
            localStorage.setItem('icupa_user_country', 'Malta');
          }
        );
      } else {
        setSelectedCountry('Malta');
        localStorage.setItem('icupa_user_country', 'Malta');
      }
    } catch (error) {
      console.error('Error detecting country:', error);
      setSelectedCountry('Malta');
      localStorage.setItem('icupa_user_country', 'Malta');
    }
  };

  const fetchBarsData = async () => {
    setLoading(true);
    try {
      let query = supabase
        .from('bars')
        .select('*');

      if (selectedCountry === 'Malta') {
        query = query.ilike('address', '%Malta%');
      } else if (selectedCountry === 'Rwanda') {
        query = query.or('address.ilike.%Rwanda%,address.ilike.%Kigali%');
      }

      const { data: barsData, error } = await query
        .order('name')
        .limit(50);

      if (error) {
        console.error('Error fetching bars:', error);
        setBars([]);
      } else {
        const barsWithCountry = barsData?.map(bar => ({
          ...bar,
          country: bar.address?.includes('Malta') ? 'Malta' : 
                   (bar.address?.includes('Rwanda') || bar.address?.includes('Kigali')) ? 'Rwanda' : 'Unknown'
        })) || [];
        
        setBars(barsWithCountry);
      }

    } catch (error) {
      console.error('Error fetching bars data:', error);
      setBars([]);
      toast({
        title: "Error loading establishments",
        description: "Please try refreshing the page",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const fetchCartSummary = async () => {
    try {
      const { data: cartData } = await supabase
        .from('carts')
        .select(`
          cart_items(
            qty,
            menu_items(price_local)
          )
        `)
        .eq('session_id', sessionId)
        .eq('status', 'active')
        .single();

      if (cartData?.cart_items) {
        const count = cartData.cart_items.reduce((sum: number, item: any) => sum + item.qty, 0);
        const total = cartData.cart_items.reduce((sum: number, item: any) => 
          sum + (item.qty * item.menu_items.price_local), 0);
        setCartCount(count);
        setCartTotal(total);
      }
    } catch (error) {
      console.log('No cart found yet');
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('rw-RW', {
      style: 'currency',
      currency: 'RWF',
      minimumFractionDigits: 0
    }).format(price);
  };

  const getTimeGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return "Good morning";
    if (hour < 17) return "Good afternoon";
    return "Good evening";
  };

  const filteredBars = bars.filter(bar =>
    bar.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    bar.address?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const visitBar = (bar: Bar) => {
    navigate(`/menu/${bar.id}?name=${encodeURIComponent(bar.name)}`);
  };

  const handleOnboardingComplete = (preferences: {
    country: string;
    location: { latitude: number; longitude: number } | null;
    notificationsEnabled: boolean;
  }) => {
    setSelectedCountry(preferences.country);
    setShowOnboarding(false);
    
    toast({
      title: "Welcome to ICUPA! 🎉",
      description: `Ready to explore amazing places in ${preferences.country}`,
    });
  };

  const handleOnboardingSkip = () => {
    setShowOnboarding(false);
    detectUserCountry();
  };

  // Show onboarding if needed
  if (showOnboarding) {
    return (
      <ClientOnboarding 
        onComplete={handleOnboardingComplete}
        onSkip={handleOnboardingSkip}
      />
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-orange-500 rounded-full flex items-center justify-center">
                <ChefHat className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900 dark:text-white">ICUPA</h1>
                <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                  <span className="flag-icon">
                    {selectedCountry === 'Malta' ? '🇲🇹' : selectedCountry === 'Rwanda' ? '🇷🇼' : '🌍'}
                  </span>
                  <span>{selectedCountry || 'Detecting location...'}</span>
                </div>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              <div className="flex gap-1">
                <Button
                  variant={selectedCountry === 'Malta' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => {
                    setSelectedCountry('Malta');
                    localStorage.setItem('icupa_user_country', 'Malta');
                  }}
                >
                  🇲🇹 Malta
                </Button>
                <Button
                  variant={selectedCountry === 'Rwanda' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => {
                    setSelectedCountry('Rwanda');
                    localStorage.setItem('icupa_user_country', 'Rwanda');
                  }}
                >
                  🇷🇼 Rwanda
                </Button>
              </div>
              
              <Button variant="ghost" size="icon" onClick={() => navigate('/notifications')}>
                <Bell className="w-5 h-5" />
              </Button>
              <Button variant="ghost" size="icon" onClick={() => navigate('/profile')}>
                <User className="w-5 h-5" />
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6 space-y-6 pb-24">
        {/* Greeting */}
        <Card className="bg-gradient-to-r from-orange-500 to-red-500 text-white border-0">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold mb-1">
                  {getTimeGreeting()}! 👋
                </h2>
                <p className="text-orange-100">
                  Discover amazing bars & restaurants in {selectedCountry}
                </p>
              </div>
              <div className="text-right">
                <div className="text-sm text-orange-100">
                  {filteredBars.length} places found
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search bars & restaurants..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>

        {/* Bars Grid */}
        {loading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {Array.from({ length: 6 }).map((_, i) => (
              <Card key={i} className="h-64">
                <Skeleton className="h-32 w-full rounded-t-lg" />
                <div className="p-4 space-y-2">
                  <Skeleton className="h-4 w-3/4" />
                  <Skeleton className="h-3 w-1/2" />
                  <Skeleton className="h-8 w-full" />
                </div>
              </Card>
            ))}
          </div>
        ) : filteredBars.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {filteredBars.map((bar) => (
              <Card key={bar.id} className="hover:shadow-lg transition-shadow cursor-pointer" onClick={() => visitBar(bar)}>
                <div className="relative h-32 bg-gradient-to-r from-orange-400 to-red-400 rounded-t-lg overflow-hidden">
                  <div className="absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center">
                    <ChefHat className="w-12 h-12 text-white" />
                  </div>
                  
                  {bar.rating && (
                    <div className="absolute top-2 right-2">
                      <Badge variant="secondary" className="bg-white/90 text-gray-800">
                        <Star className="w-3 h-3 mr-1 text-yellow-500 fill-current" />
                        {bar.rating}
                      </Badge>
                    </div>
                  )}
                </div>
                
                <CardContent className="p-4">
                  <div className="space-y-3">
                    <h3 className="font-semibold text-lg line-clamp-1">{bar.name}</h3>
                    
                    <div className="flex items-start gap-2 text-sm text-gray-600 dark:text-gray-400">
                      <MapPin className="w-4 h-4 mt-0.5 flex-shrink-0" />
                      <span className="line-clamp-2">{bar.address}</span>
                    </div>
                    
                    {bar.contact_number && (
                      <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                        <Phone className="w-4 h-4" />
                        <span>{bar.contact_number}</span>
                      </div>
                    )}
                    
                    <Button
                      onClick={(e) => {
                        e.stopPropagation();
                        visitBar(bar);
                      }}
                      className="w-full bg-orange-500 hover:bg-orange-600 text-white"
                    >
                      <ExternalLink className="w-4 h-4 mr-2" />
                      View Menu
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">🔍</div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              No establishments found
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              Try adjusting your search or select a different country
            </p>
          </div>
        )}
      </div>

      {/* Cart Bar */}
      {cartCount > 0 && (
        <div className="fixed bottom-4 left-4 right-4 z-50">
          <Card className="bg-orange-500 border-orange-600 shadow-lg">
            <CardContent className="p-4">
              <Button
                onClick={() => navigate('/cart')}
                className="w-full bg-white text-orange-600 hover:bg-gray-50 font-semibold flex items-center justify-between"
                size="lg"
              >
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <ShoppingCart className="w-5 h-5" />
                    <Badge className="absolute -top-2 -right-2 bg-orange-600 text-white text-xs w-5 h-5 rounded-full flex items-center justify-center p-0">
                      {cartCount}
                    </Badge>
                  </div>
                  <div className="text-left">
                    <div className="text-sm">
                      {cartCount} item{cartCount !== 1 ? 's' : ''}
                    </div>
                    <div className="text-lg font-bold">
                      {formatPrice(cartTotal)}
                    </div>
                  </div>
                </div>
                <span className="text-sm">View Cart →</span>
              </Button>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default ClientHome;
