import React, { Suspense, lazy } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { CartProvider } from '@/hooks/useCart';
import useMenuFeed from '@/hooks/useMenuFeed';
import { Skeleton } from '@/components/ui/skeleton';
import { Button } from '@/components/ui/button';
import { RefreshCw, Wifi, WifiOff } from 'lucide-react';

// Lazy load components for better performance
const SmartGreeting = lazy(() => import('@/features/home/SmartGreeting'));
const CarouselPromo = lazy(() => import('@/features/home/CarouselPromo'));
const CategoryChipsRow = lazy(() => import('@/features/home/CategoryChipsRow'));
const MenuGrid = lazy(() => import('@/features/home/MenuGrid'));
const CartBar = lazy(() => import('@/features/cart/CartBar'));
const AISommelierFAB = lazy(() => import('@/features/ai-chat/AISommelierFAB'));

// Loading fallback component
const LoadingFallback = ({ text = "Loading..." }: { text?: string }) => (
  <div className="flex items-center justify-center p-8">
    <div className="flex items-center gap-3">
      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-orange-500" />
      <span className="text-gray-600 dark:text-gray-400">{text}</span>
    </div>
  </div>
);

// Error fallback component
const ErrorFallback = ({ error, resetErrorBoundary }: { error: Error, resetErrorBoundary: () => void }) => (
  <div className="min-h-[200px] flex items-center justify-center p-8">
    <div className="text-center max-w-md">
      <div className="text-6xl mb-4">ðŸ˜…</div>
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
        Oops! Something went wrong
      </h3>
      <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
        Don't worry, we're on it! Try refreshing the page.
      </p>
      <Button onClick={resetErrorBoundary} className="bg-orange-500 hover:bg-orange-600">
        <RefreshCw className="w-4 h-4 mr-2" />
        Try Again
      </Button>
    </div>
  </div>
);

// Main component with network status
const ClientHome = () => {
  const {
    data: feedData,
    loading,
    error,
    refresh,
    loadMore,
    setCategory,
    currentCategory
  } = useMenuFeed();

  const [isOnline, setIsOnline] = React.useState(navigator.onLine);

  React.useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // Get table number from URL params or localStorage
  const tableNumber = React.useMemo(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const tableFromUrl = urlParams.get('table');
    if (tableFromUrl) {
      localStorage.setItem('icupa_table_number', tableFromUrl);
      return tableFromUrl;
    }
    return localStorage.getItem('icupa_table_number') || undefined;
  }, []);

  const handlePromoClick = (promo: any) => {
    // TODO: Navigate to promo details or apply to cart
    console.log('Promo clicked:', promo);
  };

  const handleItemClick = (item: any) => {
    // TODO: Open item details modal
    console.log('Item clicked:', item);
  };

  if (error && !feedData) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <div className="container mx-auto px-4 py-8">
          <ErrorFallback 
            error={new Error(error)} 
            resetErrorBoundary={refresh}
          />
        </div>
      </div>
    );
  }

  return (
    <CartProvider>
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        {/* Network Status Indicator */}
        {!isOnline && (
          <div className="bg-yellow-500 text-white p-2 text-center text-sm flex items-center justify-center gap-2">
            <WifiOff className="w-4 h-4" />
            <span>You're offline - showing cached content</span>
          </div>
        )}

        <div className="container mx-auto px-4 py-6 space-y-6 pb-24">
          {/* Smart Greeting */}
          <ErrorBoundary
            FallbackComponent={ErrorFallback}
            onReset={refresh}
          >
            <Suspense fallback={<Skeleton className="h-24 w-full rounded-lg" />}>
              <SmartGreeting
                greeting={feedData?.greeting || { message: 'Welcome to ICUPA!', subtext: 'Loading...' }}
                tableNumber={tableNumber}
              />
            </Suspense>
          </ErrorBoundary>

          {/* Featured Promotions Carousel */}
          {feedData?.promotions && feedData.promotions.length > 0 && (
            <ErrorBoundary
              FallbackComponent={ErrorFallback}
              onReset={refresh}
            >
              <Suspense fallback={<Skeleton className="h-48 w-full rounded-lg" />}>
                <CarouselPromo
                  promotions={feedData.promotions}
                  onPromoClick={handlePromoClick}
                />
              </Suspense>
            </ErrorBoundary>
          )}

          {/* Category Filter Chips */}
          {feedData?.categories && feedData.categories.length > 0 && (
            <ErrorBoundary
              FallbackComponent={ErrorFallback}
              onReset={refresh}
            >
              <Suspense fallback={<Skeleton className="h-12 w-full rounded-lg" />}>
                <CategoryChipsRow
                  categories={feedData.categories}
                  selectedCategory={currentCategory}
                  onCategorySelect={setCategory}
                />
              </Suspense>
            </ErrorBoundary>
          )}

          {/* Menu Grid */}
          <ErrorBoundary
            FallbackComponent={ErrorFallback}
            onReset={refresh}
          >
            <Suspense fallback={<LoadingFallback text="Loading delicious menu..." />}>
              <MenuGrid
                items={feedData?.menuItems || []}
                loading={loading}
                onItemClick={handleItemClick}
                onLoadMore={loadMore}
                hasMore={feedData?.pagination?.hasMore}
              />
            </Suspense>
          </ErrorBoundary>

          {/* Network indicator for online status */}
          {isOnline && (
            <div className="fixed top-4 right-4 z-50">
              <div className="bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 p-2 rounded-full">
                <Wifi className="w-4 h-4" />
              </div>
            </div>
          )}
        </div>

        {/* Persistent Cart Bar */}
        <ErrorBoundary
          FallbackComponent={() => null}
          onReset={refresh}
        >
          <Suspense fallback={null}>
            <CartBar />
          </Suspense>
        </ErrorBoundary>

        {/* AI Sommelier FAB */}
        <ErrorBoundary
          FallbackComponent={() => null}
          onReset={refresh}
        >
          <Suspense fallback={null}>
            <AISommelierFAB />
          </Suspense>
        </ErrorBoundary>
      </div>
    </CartProvider>
  );
};

export default ClientHome; 